# -*- coding: utf-8 -*-
"""ClassTest.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WVOZ0UGEObag-0nT5flnXQre-rNsAJy8
"""

!git clone https://github.com/YoongiKim/CIFAR-10-images

import torch
import numpy as np
train_on_gpu=torch.cuda.is_available()
if not train_on_gpu:
  print('CUDA is not available.Training on CPU...')
else:
  print('CUDA is available !!!!!!!!!!  ENJOY !!!!!! We will train on GPU.')

import torchvision.transforms as transforms

transform=transforms.Compose([transforms.RandomHorizontalFlip(),
                             transforms.RandomRotation(10),
                             transforms.ToTensor(),
                             transforms.Normalize((0.5,0.5,0.5),(0.5,0.5,0.5))])

from torchvision import datasets

import csv
with open('images.csv', 'w', newline='') as file:
    writer = csv.writer(file)

class MyDataset(Dataset):
  def __init__(self,image_set,augment=True):
    with open(image_set,"r") as csv_handle:
      csv_reader=csv.reader(csv_handle,delimiter=",")
      self.imgfiles=[eachline]

/content/CIFAR-10-images/train/deer/0012.jpg
/content/CIFAR-10-images/test/airplane/0001.jpg

"""Airplane"""

l2=[]
for i in range (10):
  l2.append("/content/CIFAR-10-images/train/automobile/000"+str(i)+".jpg")
for i in range (10,100):
  l2.append("/content/CIFAR-10-images/train/automobile/00"+str(i)+".jpg")
for i in range (100,1000):
  l2.append("/content/CIFAR-10-images/train/automobile/0"+str(i)+".jpg")



l4=[]
for i in range (10):
  l4.append("/content/CIFAR-10-images/train/cat/000"+str(i)+".jpg")
for i in range (10,100):
  l4.append("/content/CIFAR-10-images/train/cat/00"+str(i)+".jpg")
for i in range (100,1000):
  l4.append("/content/CIFAR-10-images/train/cat/0"+str(i)+".jpg")

l3=[]
for i in range (10):
  l3.append("/content/CIFAR-10-images/train/bird/000"+str(i)+".jpg")
for i in range (10,100):
  l3.append("/content/CIFAR-10-images/train/bird/00"+str(i)+".jpg")
for i in range (100,1000):
  l3.append("/content/CIFAR-10-images/train/bird/0"+str(i)+".jpg")

l1=[]
for i in range (10):
  l1.append("/content/CIFAR-10-images/train/airplane/000"+str(i)+".jpg")
for i in range (10,100):
  l1.append("/content/CIFAR-10-images/train/airplane/00"+str(i)+".jpg")
for i in range (100,1000):
  l1.append("/content/CIFAR-10-images/train/airplane/0"+str(i)+".jpg")

print(l1)

print("/content/CIFAR-10-images/train/deer/"+str(10)+".jpg")

k1=[]
for i in range(1000):
  k1.append("airplane")

data={"Path":l1,"Folder":k1}

import pandas as pd

df = pd.DataFrame(data)

df

!git clone https://github.com/YoongiKim/CIFAR-10-images

import os
p1=[]
c1=[]
for file_name in os.listdir("CIFAR-10-images/test/"):
  for files in os.listdir("CIFAR-10-images/test/"+file_name):
    if files.split(".")[-1].lower() in {"jpeg", "jpg", "png"}:
        #img = cv2.imread("CIFAR-10-images/test/airplane/0000.jpg" + file_name)
        #print('CIFAR-10-images/test/'+file_name+'/'+files, file_name)
        #dataset.append([['CIFAR-10-images/test/'+file_name+'/'+files , file_name]])
        path='CIFAR-10-images/test/'+file_name+'/'+files
        clss=file_name
        p1.append(path)
        c1.append(clss)


import pandas as pd
data_set=pd.DataFrame({'path':p1,'class':c1})

data_set

p2=[]
c2=[]
for file_name in os.listdir("CIFAR-10-images/train/"):
  for files in os.listdir("CIFAR-10-images/train/"+file_name):
    if files.split(".")[-1].lower() in {"jpeg", "jpg", "png"}:
        #img = cv2.imread("CIFAR-10-images/test/airplane/0000.jpg" + file_name)
        #print('CIFAR-10-images/test/'+file_name+'/'+files, file_name)
        #dataset.append([['CIFAR-10-images/test/'+file_name+'/'+files , file_name]])
        path='CIFAR-10-images/test/'+file_name+'/'+files
        clss=file_name
        p2.append(path)
        c2.append(clss)

data_set2=pd.DataFrame({'path':p2,'class':c2})

data_set2

data_set.to_csv('test.csv', index=False)

data_set2.to_csv('train.csv', index=False)

import csv
class MyDataset():
  def __init__(self,image_set,argument=True):
    with open(image_set,"r") as csv_handle:
      csv_reader = csv.reader(csv_handle,delimiter=",")
      self.imgfiles=[eachline[0] for eachline in csv_reader]
    self.argument=argument
  def __len__(self):
    return len(self.imgfiles)
  def __gititem__(self,idx):
    img=imageio.imread(self.imgfiles[idx])
    X=np.asarray(img,dtype=np.float32)
    if self.argument:
      X=do_yarn_transform(X)
    Y=self.classlabels[idx]
    return X,Y

test_data=pd.read_csv("test.csv")

test_data=MyDataset("test.csv")

train_data=MyDataset("train.csv")

import torch.nn as nn
import torch.nn.functional as F

# define the CNN architecture
class Net(nn.Module):
    def __init__(self):
        super(Net, self).__init__()
        # convolutional layer (sees 32x32x3 image tensor)
        self.conv1 = nn.Conv2d(3, 16, 3, padding=1)
        # convolutional layer (sees 16x16x16 tensor)
        self.conv2 = nn.Conv2d(16, 32, 3, padding=1)
        # convolutional layer (sees 8x8x32 tensor)
        self.conv3 = nn.Conv2d(32, 64, 3, padding=1)
        # max pooling layer
        self.pool = nn.MaxPool2d(2, 2)
        # linear layer (64 * 4 * 4 -> 500)
        self.fc1 = nn.Linear(64 * 4 * 4, 500)
        # linear layer (500 -> 10)
        self.fc2 = nn.Linear(500, 10)
        # dropout layer (p=0.25)
        self.dropout = nn.Dropout(0.25)

    def forward(self, x):
        # add sequence of convolutional and max pooling layers
        x = self.pool(F.relu(self.conv1(x)))
        x = self.pool(F.relu(self.conv2(x)))
        x = self.pool(F.relu(self.conv3(x)))
        # flatten image input
        x = x.view(-1, 64 * 4 * 4)
        # add dropout layer
        x = self.dropout(x)
        # add 1st hidden layer, with relu activation function
        x = F.relu(self.fc1(x))
        # add dropout layer
        x = self.dropout(x)
        # add 2nd hidden layer, with relu activation function
        x = self.fc2(x)
        return x

# create a complete CNN
model = Net()
print(model)